Things that are lousy about this branch:

Very High:
-Fun comparator syntax
-String interpolation
-Do away with `Utilities`
-Uses of `undefined` and `null` should cause caution (and existential checks should be done right)
-Abolish postfix control flow (e.g. `3 if true`)
-Kill "amount" and "a" and "t" as varnames
-I hate `array[..]`.  It clones, but cryptically
-Exceptions should have their own package
-Do away with uses of `Error`/`Exception` and use proper exception classes
-Names of private members should be preceded with underscores
-Lodashification
--Loops on numerical ranges should be Lodasherized
--Uses of `length`
-`World` should not manually manage turtle IDs
-Fatten up those arrows!
-`Prims` vs. `AgentSet` nonsense sucks

High:
-FPification
-`Breed and `BreedManager` are wonky
-`Shufflerator` is lame
-Replace `AgentModel` with an `Overlord` and overhaul the code
--Things should stop managing their own updates
-`Agents` should not be named as such, and should (hopefully) roll in with `AgentSet`
-Polymorphism patrol and general abolition of `instanceof`
-Value wrappers: ID, NLColor, XCor, YCor, PenMode
-`LinkSet`, `PatchSet`, `TurtleSet` as smart, easy set classes
-Apply type signature to all methods
--`Unit` functions should end in `return`
-Clean up import ordering and 'integration' vs. 'engine' nonsense
-"CC Uri" notices
-`Iterator` is puny and questionable in its existence, and its interface sucks
-`<x>sOwn` objects
-Code is `Tasks` is confusing

Mid:
-Agentsets don't handle dead agents correctly.  JVM NetLogo has `DeadSkippingIterator` for this.  Tortoise just continues to act as if the dead agents are valid, unless they're a part of a breed agentset.  Check out being able to observe object changes in ECAMScript 6.
-The way that I lumped patches in with breeds doesn't work correctly.  Namely, patches don't actually have breeds, so it just ends up being `undefined`, which isn't really right
-Engine variables should be referenced by name, rather than number

Low:
-Optimizations
-Random number generation often seems to take a lot of a model's time.  Would it be crazy to run the random generator within a web worker and constantly keep a pre-computed queue of 100 or 1000 or so numbers?
-`./sbt benchmark` does the same thing as `./sbt run`
-Lousy interfaces with SpiderMonkey and V8
